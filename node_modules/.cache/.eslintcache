[{"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/index.js":"1","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/App.js":"2","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/reportWebVitals.js":"3","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Navbar.js":"4","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Home.js":"5","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Monster.js":"6","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Classes.js":"7"},{"size":564,"mtime":1631067524000,"results":"8","hashOfConfig":"9"},{"size":5071,"mtime":1631067524000,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1631067524000,"results":"11","hashOfConfig":"9"},{"size":840,"mtime":1631067524000,"results":"12","hashOfConfig":"9"},{"size":187,"mtime":1631067524000,"results":"13","hashOfConfig":"9"},{"size":1986,"mtime":1631067524000,"results":"14","hashOfConfig":"9"},{"size":2256,"mtime":1631067524000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kqu50f",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/index.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/App.js",["33","34","35"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, Dimmer, Loader } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Monster from \"./components/Monster\";\nimport axios from \"axios\";\nimport Classes from \"./components/Classes\";\n\n//Main function definition\nfunction App() {\n    //declare and init monster state\n    const [monster, setMonster] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    //Declare and init character classes state\n    const [classes, setClasses] = useState([]);\n    //const [classesLoading, setClassesLoading] = useState(true);\n\n    let isRendered = useRef(false);\n    useEffect(() => {\n        isRendered = true;\n        //Axios gets monster data from the api\n        axios\n            .get(\"https://www.dnd5eapi.co/api/monsters/\")\n            .then((res) => {\n                //Invoke setData() to set the data\n                setMonster(res.data.results);\n                console.log(\"MONSTER.RESULTS\", res.data.results);\n                //Generate a random number to randomly choose a monster\n                var randomNumber = Math.floor(Math.random() * 330);\n                //Assign the index to a variable\n                const monsterName = res.data.results[`${randomNumber}`].index;\n\n                axios\n                    .get(`https://www.dnd5eapi.co/api/monsters/${monsterName}`)\n                    .then((res) => {\n                        console.log(\"AXIOS 2: \", res.data);\n                        if (isRendered) {\n                            setMonster(res.data);\n                        }\n                        return null;\n                        //Set loading to false\n                        setLoading(false);\n                    });\n            })\n\n            //Catch() function\n            .catch((err) => console.log(\"There was an error. Fix your code!\" + err));\n\n        return () => {\n            isRendered = false;\n        };\n\n        //Axios gets character class data from the api\n        //empty array to prevent infinite calls\n    }, []);\n\n    //useEffect to call classes\n    useEffect(() => {\n        isRendered = true;\n        //Axios gets monster data from the api\n        axios\n            .get(\"https://www.dnd5eapi.co/api/classes/\")\n            .then((res) => {\n                //Invoke setData() to set the data\n                setClasses(res.data.results);\n                console.log(\"CLASSES.RESULTS\", res.data.results);\n                //Generate a random number to randomly choose a monster\n                var randomNumber = Math.floor(Math.random() * 12);\n                //Assign the index to a variable\n                const classesName = res.data.results[`${randomNumber}`].index;\n                console.log(\"CLASSES.INDEX\", res.data.results[`${randomNumber}`].index);\n                axios\n                    .get(`https://www.dnd5eapi.co/api/classes/${classesName}`)\n                    .then((res) => {\n                        console.log(\"AXIOS 2classes: \", res.data);\n                        if (isRendered) {\n                            setClasses(res.data);\n                        }\n                        //Set loading to false\n                        setLoading(false);\n                    });\n            })\n\n            //Catch() function\n            .catch((err) => console.log(\"There was an error. Fix your code!\" + err));\n\n        return () => {\n            isRendered = false;\n        };\n\n        //Axios gets character class data from the api\n        //empty array to prevent infinite calls\n    }, []);\n\n    return (\n        <>\n            <Router>\n                {/* Render the NavBar component here */}\n                <Navbar />\n                <Container>\n                    {/*Ternary Loading indicator. If loading is true...*/}\n                    {loading ? (\n                        //Show the loading screen\n                        <Dimmer active inverted>\n                            <Loader inverted> LOADING...</Loader>\n                        </Dimmer>\n                    ) : (\n                        //Else, access the switch\n                        <Switch>\n                            {/*Route to home component*/}\n                            <Route exact path=\"/\">\n                                <Home />\n                            </Route>\n                            {/*Route to people component,pass in classes as props*/}\n                            <Route exact path=\"/monster\">\n                                <Monster data={monster} />\n                            </Route>\n                            {/*Route to classes component*/}\n                            <Route exact path=\"/classes\">\n                                <Classes data={classes} />\n                            </Route>\n                        </Switch>\n                    )}\n                </Container>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/reportWebVitals.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Navbar.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Home.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Monster.js",["36"],"import React from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\n//indent, align, comments, consoles\n//make cards more informative\n//add races\n//add \"get\" buttons\n//create export qgetAMonster()- it contains axios calls\n//useEffect(()=>{},[monster])\n//onClick={()=>getAMoster()}\n\n//Monster function definition, pass in data from App.js\nexport default function Monster(data) {\n    return (\n        <>\n            <h1> Monster </h1>\n            <button> GET MONSTER </button>\n            <Grid columns={3}>\n                {/* Map over data passed in from App.js\n                   For each monster in data, return a grid card*/}\n                <Grid.Column>\n                    <Card>\n                        {/*Add comments for each card type*/}\n                        <Card.Content>\n                            <Card.Header>{data.data.name}</Card.Header>\n                            <Card.Description>\n                                <strong>ALIGNMENT</strong>\n                                <p>{data.data.alignment}</p>\n                                <strong>TYPE</strong>\n                                <p>{data.data.type}</p>\n                                <strong>SIZE</strong>\n                                <p>{data.data.size}</p>\n                                <strong>SPECIAL ABILITIES</strong>\n                                {/*Map over special abilities array, populate*/}\n                                {data.data.special_abilities ? (\n                                    data.data.special_abilities.map((sa, i) => {\n                                        return (<p> {sa.name} </p>), (<p> {sa.desc}</p>);\n                                    })\n                                ) : (\n                                    <p>None</p>\n                                )}\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Classes.js",["37"],"import React from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\n\n//People function definition, pass in data from App.js\nexport default function Classes(data) {\n    return (\n        <>\n            <h1> Classes </h1>\n            <button> GET CLASS</button>\n            <Grid columns={3}>\n                {/* Map over data passed in from App.js\n                   For each character class in data, return a grid card*/}\n                <Grid.Column>\n                    <Card>\n                        {/*Add comments for each card type*/}\n                        <Card.Content>\n                            <Card.Header>{data.data.name}</Card.Header>\n                            <Card.Description>\n                                <strong>HIT DIE</strong>\n                                <p>{data.data.hit_die}</p>\n                                <strong>Weapon Proficiencies</strong>\n                                {/*Map over weapons array, populate*/}\n                                {data.data.proficiencies.map((p, i) => {\n                                    return <p> {p.index} </p>;\n                                })}\n\n                                {/*/ if speccasting is true, map. Else, <NA>\n                                !*Map over spellcasting array, populate*!/*/}\n                                <strong>SpellCasting Proficiencies</strong>\n                                {data.data.spellcasting ? (\n                                    data.data.spellcasting.info.map((s) => {\n                                        return (<p> {s.desc} </p>), (<p>{s.name}</p>);\n                                    })\n                                ) : (\n                                    <p>No spellcasting ability</p>\n                                )}\n\n                                {/*Map over weapons array, populate*/}\n                                <strong>Subclasses</strong>\n                                {data.data.subclasses.map((sc) => {\n                                    return <p> {sc.name} </p>;\n                                })}\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n",{"ruleId":"38","severity":1,"message":"39","line":23,"column":22,"nodeType":"40","endLine":23,"endColumn":26},{"ruleId":"41","severity":1,"message":"42","line":45,"column":25,"nodeType":"43","messageId":"44","endLine":45,"endColumn":43},{"ruleId":"38","severity":1,"message":"39","line":62,"column":22,"nodeType":"40","endLine":62,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":36,"column":68,"nodeType":"47","messageId":"48","endLine":36,"endColumn":69},{"ruleId":"45","severity":1,"message":"46","line":32,"column":67,"nodeType":"47","messageId":"48","endLine":32,"endColumn":68},"react-hooks/exhaustive-deps","Assignments to the 'isRendered' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression"]