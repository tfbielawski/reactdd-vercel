[{"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/index.js":"1","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/App.js":"2","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/reportWebVitals.js":"3","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Navbar.js":"4","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Home.js":"5","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Monster.js":"6","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Classes.js":"7"},{"size":564,"mtime":1631067524000,"results":"8","hashOfConfig":"9"},{"size":5071,"mtime":1634011007192,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1631067524000,"results":"11","hashOfConfig":"9"},{"size":840,"mtime":1631067524000,"results":"12","hashOfConfig":"9"},{"size":187,"mtime":1631067524000,"results":"13","hashOfConfig":"9"},{"size":2034,"mtime":1634010076272,"results":"14","hashOfConfig":"9"},{"size":2340,"mtime":1634011013685,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"kqu50f",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/index.js",[],["32","33"],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/App.js",["34","35","36"],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/reportWebVitals.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Navbar.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Home.js",[],"/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Monster.js",["37"],"import React from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\n\n//ToDo\n//make cards more informative\n//add races\n//add \"get\" buttons\n//create export qetAMonster()- it contains axios calls\n//useEffect(()=>{},[monster])\n//onClick={()=>getAMoster()}\n\n//Monster function definition, pass in data from App.js\nexport default function Monster(data) {\n    return (\n        <>\n            <h1> Monster </h1>\n            {/*<button> GET MONSTER </button>*/}\n            <p> Refresh to get a new monster! (button coming soon)</p>\n            <Grid columns={3}>\n                {/* Map over data passed in from App.js\n                   For each monster in data, return a grid card*/}\n                <Grid.Column>\n                    <Card>\n                        {/*Add comments for each card type*/}\n                        <Card.Content>\n                            <Card.Header>{data.data.name}</Card.Header>\n                            <Card.Description>\n                                <strong>ALIGNMENT</strong>\n                                <p>{data.data.alignment}</p>\n                                <strong>TYPE</strong>\n                                <p>{data.data.type}</p>\n                                <strong>SIZE</strong>\n                                <p>{data.data.size}</p>\n                                <strong>SPECIAL ABILITIES</strong>\n                                {/*Map over special abilities array, populate*/}\n                                {data.data.special_abilities ? (\n                                    data.data.special_abilities.map((sa, i) => {\n                                        return (<p> {sa.name} </p>), (<p> {sa.desc}</p>);\n                                    })\n                                ) : (\n                                    <p>None</p>\n                                )}\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","/home/trollhero/MEGAsync/Lambda/reactdd-vercel/src/components/Classes.js",["38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":23,"column":22,"nodeType":"45","endLine":23,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":45,"column":25,"nodeType":"48","messageId":"49","endLine":45,"endColumn":43},{"ruleId":"43","severity":1,"message":"44","line":62,"column":22,"nodeType":"45","endLine":62,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":38,"column":68,"nodeType":"52","messageId":"53","endLine":38,"endColumn":69},{"ruleId":"50","severity":1,"message":"51","line":33,"column":67,"nodeType":"52","messageId":"53","endLine":33,"endColumn":68},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","Assignments to the 'isRendered' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]