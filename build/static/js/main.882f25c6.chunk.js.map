{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Monster.js","components/Classes.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","Menu","inverted","Container","to","Item","name","Home","Monster","data","Grid","columns","Column","Card","Content","Header","Description","alignment","type","size","special_abilities","map","sa","i","desc","Classes","hit_die","proficiencies","p","index","spellcasting","info","s","subclasses","sc","App","useState","monster","setMonster","loading","setLoading","classes","setClasses","isRendered","useRef","useEffect","axios","get","then","res","results","console","log","randomNumber","Math","floor","random","monsterName","catch","err","classesName","Dimmer","active","Loader","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.882f25c6.chunk.js","sourcesContent":["import React from \"react\";\nimport {Menu, Container} from \"semantic-ui-react\";\nimport {Link} from \"react-router-dom\";\n\n//Navbar function\nexport default function Navbar() {\n    return (\n        //Semantic Menu\n        <Menu inverted>\n            {/*Semantic Container*/}\n            <Container>\n                {/*Link to home*/}\n                <Link to = \"/\">\n                    <Menu.Item name = \"Fantasy Generator Home\"></Menu.Item>\n                </Link>\n                {/*Link to people*/}\n                <Link to= \"/monster\">\n                    <Menu.Item name = \"Monster Generator\"></Menu.Item>\n                </Link>\n                {/*Link to classes*/}\n                <Link to = \"/classes\">\n                    <Menu.Item name = \"Classes\"></Menu.Item>\n                </Link>\n            </Container>\n        </Menu>\n    )\n}","import React from \"react\";\nimport \"./Home.css\";\n\nexport default function Home() {\n    return (\n        <div>\n            <p>WELCOME TO THE D&D API APPLICATION</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\n//indent, align, comments, consoles\n//make cards more informative\n//add races\n//add \"get\" buttons\n//create export qgetAMonster()- it contains axios calls\n//useEffect(()=>{},[monster])\n//onClick={()=>getAMoster()}\n\n//Monster function definition, pass in data from App.js\nexport default function Monster(data) {\n    return (\n        <>\n            <h1> Monster </h1>\n            <button> GET MONSTER </button>\n            <Grid columns={3}>\n                {/* Map over data passed in from App.js\n                   For each monster in data, return a grid card*/}\n                <Grid.Column>\n                    <Card>\n                        {/*Add comments for each card type*/}\n                        <Card.Content>\n                            <Card.Header>{data.data.name}</Card.Header>\n                            <Card.Description>\n                                <strong>ALIGNMENT</strong>\n                                <p>{data.data.alignment}</p>\n                                <strong>TYPE</strong>\n                                <p>{data.data.type}</p>\n                                <strong>SIZE</strong>\n                                <p>{data.data.size}</p>\n                                <strong>SPECIAL ABILITIES</strong>\n                                {/*Map over special abilities array, populate*/}\n                                {data.data.special_abilities ? (\n                                    data.data.special_abilities.map((sa, i) => {\n                                        return (<p> {sa.name} </p>), (<p> {sa.desc}</p>);\n                                    })\n                                ) : (\n                                    <p>None</p>\n                                )}\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Card, Grid } from \"semantic-ui-react\";\n\n//People function definition, pass in data from App.js\nexport default function Classes(data) {\n    return (\n        <>\n            <h1> Classes </h1>\n            <button> GET CLASS</button>\n            <Grid columns={3}>\n                {/* Map over data passed in from App.js\n                   For each character class in data, return a grid card*/}\n                <Grid.Column>\n                    <Card>\n                        {/*Add comments for each card type*/}\n                        <Card.Content>\n                            <Card.Header>{data.data.name}</Card.Header>\n                            <Card.Description>\n                                <strong>HIT DIE</strong>\n                                <p>{data.data.hit_die}</p>\n                                <strong>Weapon Proficiencies</strong>\n                                {/*Map over weapons array, populate*/}\n                                {data.data.proficiencies.map((p, i) => {\n                                    return <p> {p.index} </p>;\n                                })}\n\n                                {/*/ if speccasting is true, map. Else, <NA>\n                                !*Map over spellcasting array, populate*!/*/}\n                                <strong>SpellCasting Proficiencies</strong>\n                                {data.data.spellcasting ? (\n                                    data.data.spellcasting.info.map((s) => {\n                                        return (<p> {s.desc} </p>), (<p>{s.name}</p>);\n                                    })\n                                ) : (\n                                    <p>No spellcasting ability</p>\n                                )}\n\n                                {/*Map over weapons array, populate*/}\n                                <strong>Subclasses</strong>\n                                {data.data.subclasses.map((sc) => {\n                                    return <p> {sc.name} </p>;\n                                })}\n                            </Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, Dimmer, Loader } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Monster from \"./components/Monster\";\nimport axios from \"axios\";\nimport Classes from \"./components/Classes\";\n\n//Main function definition\nfunction App() {\n    //declare and init monster state\n    const [monster, setMonster] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    //Declare and init character classes state\n    const [classes, setClasses] = useState([]);\n    //const [classesLoading, setClassesLoading] = useState(true);\n\n    let isRendered = useRef(false);\n    useEffect(() => {\n        isRendered = true;\n        //Axios gets monster data from the api\n        axios\n            .get(\"https://www.dnd5eapi.co/api/monsters/\")\n            .then((res) => {\n                //Invoke setData() to set the data\n                setMonster(res.data.results);\n                console.log(\"MONSTER.RESULTS\", res.data.results);\n                //Generate a random number to randomly choose a monster\n                var randomNumber = Math.floor(Math.random() * 330);\n                //Assign the index to a variable\n                const monsterName = res.data.results[`${randomNumber}`].index;\n\n                axios\n                    .get(`https://www.dnd5eapi.co/api/monsters/${monsterName}`)\n                    .then((res) => {\n                        console.log(\"AXIOS 2: \", res.data);\n                        if (isRendered) {\n                            setMonster(res.data);\n                        }\n                        return null;\n                        //Set loading to false\n                        setLoading(false);\n                    });\n            })\n\n            //Catch() function\n            .catch((err) => console.log(\"There was an error. Fix your code!\" + err));\n\n        return () => {\n            isRendered = false;\n        };\n\n        //Axios gets character class data from the api\n        //empty array to prevent infinite calls\n    }, []);\n\n    //useEffect to call classes\n    useEffect(() => {\n        isRendered = true;\n        //Axios gets monster data from the api\n        axios\n            .get(\"https://www.dnd5eapi.co/api/classes/\")\n            .then((res) => {\n                //Invoke setData() to set the data\n                setClasses(res.data.results);\n                console.log(\"CLASSES.RESULTS\", res.data.results);\n                //Generate a random number to randomly choose a monster\n                var randomNumber = Math.floor(Math.random() * 12);\n                //Assign the index to a variable\n                const classesName = res.data.results[`${randomNumber}`].index;\n                console.log(\"CLASSES.INDEX\", res.data.results[`${randomNumber}`].index);\n                axios\n                    .get(`https://www.dnd5eapi.co/api/classes/${classesName}`)\n                    .then((res) => {\n                        console.log(\"AXIOS 2classes: \", res.data);\n                        if (isRendered) {\n                            setClasses(res.data);\n                        }\n                        //Set loading to false\n                        setLoading(false);\n                    });\n            })\n\n            //Catch() function\n            .catch((err) => console.log(\"There was an error. Fix your code!\" + err));\n\n        return () => {\n            isRendered = false;\n        };\n\n        //Axios gets character class data from the api\n        //empty array to prevent infinite calls\n    }, []);\n\n    return (\n        <>\n            <Router>\n                {/* Render the NavBar component here */}\n                <Navbar />\n                <Container>\n                    {/*Ternary Loading indicator. If loading is true...*/}\n                    {loading ? (\n                        //Show the loading screen\n                        <Dimmer active inverted>\n                            <Loader inverted> LOADING...</Loader>\n                        </Dimmer>\n                    ) : (\n                        //Else, access the switch\n                        <Switch>\n                            {/*Route to home component*/}\n                            <Route exact path=\"/\">\n                                <Home />\n                            </Route>\n                            {/*Route to people component,pass in classes as props*/}\n                            <Route exact path=\"/monster\">\n                                <Monster data={monster} />\n                            </Route>\n                            {/*Route to classes component*/}\n                            <Route exact path=\"/classes\">\n                                <Classes data={classes} />\n                            </Route>\n                        </Switch>\n                    )}\n                </Container>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//Import magical CSS\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}